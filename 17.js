webpackJsonp([17],{466:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=h(n(4)),r=h(n(2)),a=h(n(3)),l=h(n(5)),s=h(n(6)),c=n(0),u=h(c),d=h(n(473)),i=h(n(470)),f=h(n(655)),g=h(n(656)),y=h(n(657));function h(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(){return(0,r.default)(this,t),(0,l.default)(this,(t.__proto__||(0,o.default)(t)).apply(this,arguments))}return(0,s.default)(t,e),(0,a.default)(t,[{key:"render",value:function(){return u.default.createElement("div",null,u.default.createElement(d.default,{title:"示例一",content:u.default.createElement(g.default,null),doc:f.default}),u.default.createElement(i.default,{source:y.default}))}}]),t}(c.Component);t.default=u.default.createElement(p,null),e.exports=t.default},470:function(e,t,n){e.exports=n(9)(1141)},471:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=d(n(4)),r=d(n(2)),a=d(n(3)),l=d(n(5)),s=d(n(6)),c=d(n(0)),u=n(472);function d(e){return e&&e.__esModule?e:{default:e}}var i=function(e){function t(e){(0,r.default)(this,t);var n=(0,l.default)(this,(t.__proto__||(0,o.default)(t)).call(this,e));return n.state={},n}return(0,s.default)(t,e),(0,a.default)(t,[{key:"render",value:function(){return c.default.createElement("div",null,c.default.createElement(u.UnControlled,{value:this.props.value,options:{mode:"javascript",theme:"material",readOnly:!0},onChange:function(e,t,n){}}))}}]),t}(c.default.Component);t.default=i,e.exports=t.default},472:function(e,t,n){e.exports=n(9)(1602)},473:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=d(n(4)),r=d(n(2)),a=d(n(3)),l=d(n(5)),s=d(n(6)),c=d(n(0)),u=(d(n(470)),d(n(471)));function d(e){return e&&e.__esModule?e:{default:e}}var i=function(e){function t(e){(0,r.default)(this,t);var n=(0,l.default)(this,(t.__proto__||(0,o.default)(t)).call(this,e));return n.state={},n}return(0,s.default)(t,e),(0,a.default)(t,[{key:"render",value:function(){return c.default.createElement("div",null,c.default.createElement("p",null,this.props.title),this.props.content,c.default.createElement("br",null),c.default.createElement("br",null),c.default.createElement("br",null),c.default.createElement("div",null,c.default.createElement(u.default,{value:this.props.doc})))}}]),t}(c.default.Component);t.default=i,e.exports=t.default},655:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nimport React, { Component } from 'react'\nimport { Transfer } from 'ttk-component'\n\nconst mockData = [];\nfor (let i = 0; i < 20; i++) {\n\tmockData.push({\n\t\tkey: i.toString(),\n\t\ttitle: 'content'+i,\n\t\tdescription: 'description of content'+i,\n\t\tdisabled: i % 3 < 1,\n\t})\n}\n\nconst targetKeys = mockData\n\t.filter(item => +item.key % 3 > 1)\n\t.map(item => item.key)\n\n\nexport default class Example1 extends Component {\n\tstate = {\n\t\ttargetKeys,\n\t\tselectedKeys: [],\n\t}\n\n\thandleChange = (nextTargetKeys, direction, moveKeys) => {\n\t\tthis.setState({ targetKeys: nextTargetKeys })\n\t\tconsole.log('targetKeys: ', targetKeys)\n\t\tconsole.log('direction: ', direction)\n\t\tconsole.log('moveKeys: ', moveKeys)\n\t}\n\n\thandleSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {\n\t\tthis.setState({ selectedKeys: [...sourceSelectedKeys, ...targetSelectedKeys] })\n\t\tconsole.log('sourceSelectedKeys: ', sourceSelectedKeys)\n\t\tconsole.log('targetSelectedKeys: ', targetSelectedKeys)\n\t}\n\n\thandleScroll = (direction, e) => {\n\t\tconsole.log('direction:', direction)\n\t\tconsole.log('target:', e.target)\n\t}\n\n\trender() {\n\t\tconst state = this.state\n\t\treturn (\n\t\t\t<Transfer\n\t\t\t\tdataSource={mockData}\n\t\t\t\ttitles={['Source', 'Target']}\n\t\t\t\ttargetKeys={state.targetKeys}\n\t\t\t\tselectedKeys={state.selectedKeys}\n\t\t\t\tonChange={this.handleChange}\n\t\t\t\tonSelectChange={this.handleSelectChange}\n\t\t\t\tonScroll={this.handleScroll}\n\t\t\t\trender={item => item.title}\n\t\t\t/>\n\t\t)\n\t}\n}\n",e.exports=t.default},656:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=f(n(35)),r=f(n(4)),a=f(n(2)),l=f(n(3)),s=f(n(5)),c=f(n(6)),u=n(0),d=f(u),i=n(128);function f(e){return e&&e.__esModule?e:{default:e}}for(var g=[],y=0;y<20;y++)g.push({key:y.toString(),title:"content"+y,description:"description of content"+y,disabled:y%3<1});var h=g.filter(function(e){return+e.key%3>1}).map(function(e){return e.key}),p=function(e){function t(){var e,n,l,c;(0,a.default)(this,t);for(var u=arguments.length,d=Array(u),i=0;i<u;i++)d[i]=arguments[i];return n=l=(0,s.default)(this,(e=t.__proto__||(0,r.default)(t)).call.apply(e,[this].concat(d))),l.state={targetKeys:h,selectedKeys:[]},l.handleChange=function(e,t,n){l.setState({targetKeys:e}),console.log("targetKeys: ",h),console.log("direction: ",t),console.log("moveKeys: ",n)},l.handleSelectChange=function(e,t){l.setState({selectedKeys:[].concat((0,o.default)(e),(0,o.default)(t))}),console.log("sourceSelectedKeys: ",e),console.log("targetSelectedKeys: ",t)},l.handleScroll=function(e,t){console.log("direction:",e),console.log("target:",t.target)},c=n,(0,s.default)(l,c)}return(0,c.default)(t,e),(0,l.default)(t,[{key:"render",value:function(){var e=this.state;return d.default.createElement(i.Transfer,{dataSource:g,titles:["Source","Target"],targetKeys:e.targetKeys,selectedKeys:e.selectedKeys,onChange:this.handleChange,onSelectChange:this.handleSelectChange,onScroll:this.handleScroll,render:function(e){return e.title}})}}]),t}(u.Component);t.default=p,e.exports=t.default},657:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\n# Transfer 穿梭选择框\n\n双栏穿梭选择框\n\n## 何时使用\n\n用直观的方式在两栏中移动元素，完成选择行为。\n\n选择一个或以上的选项后，点击对应的方向键，可以把选中的选项移动到另一栏。\n其中，左边一栏为 `source`，右边一栏为 `target`，API 的设计也反应了这两个概念。\n\n## antd Transfer API\n\n[详情请点击查看官方](https://ant.design/components/transfer-cn/)\n\n| 参数      | 说明                                     | 类型       | 默认值 |\n|-----------|------------------------------------------|------------|--------|\n| dataSource | 数据源，其中的数据将会被渲染到左边一栏中，`targetKeys` 中指定的除外。 | [TransferItem](https://git.io/vMM64)[] | [] |\n| render | 每行数据渲染函数，该函数的入参为 `dataSource` 中的项，返回值为 ReactElement | Function(record)  |     |\n| targetKeys | 显示在右侧框数据的key集合 | string[]  | [] |\n| selectedKeys | 设置哪些项应该被选中 | string[] | [] |\n| onChange | 选项在两栏之间转移时的回调函数 | (targetKeys, direction, moveKeys): void |  |\n| onSelectChange | 选中项发生改变时的回调函数 | (sourceSelectedKeys, targetSelectedKeys): void | |\n| onScroll | 选项列表滚动时的回调函数 | (direction, event): void | |\n| listStyle | 两个穿梭框的自定义样式 | object |  |\n| className | 自定义类 | string |  |\n| titles | 标题集合,顺序从左至右 | string[] | ['', ''] |\n| operations | 操作文案集合,顺序从上至下 | string[] | [] |\n| showSearch | 是否显示搜索框 | boolean | false |\n| filterOption | 接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 `true`，反之则返回 `false`。| (inputValue, option): boolean | |\n| searchPlaceholder | 搜索框的默认值 | string | '请输入搜索内容' |\n| notFoundContent | 当列表为空时显示的内容 | string or ReactNode | '列表为空'  |\n| footer | 底部渲染函数 | (props): ReactNode |  |\n| lazy | Transfer 使用了 [react-lazy-load](https://github.com/loktar00/react-lazy-load) 优化性能，这里可以设置相关参数 | object | `{ height: 32, offset: 32 }` |\n| onSearchChange | 搜索框内容时改变时的回调函数 | (direction: 'left' or 'right', event: Event): void | - |\n\n## 注意\n\n按照 React 的[规范](http://facebook.github.io/react/docs/lists-and-keys.html#keys)，所有的组件数组必须绑定 key。在 Transfer 中，`dataSource`里的数据值需要指定 `key` 值。对于 `dataSource` 默认将每列数据的 `key` 属性作为唯一的标识。\n\n如果你的数据没有这个属性，务必使用 `rowKey` 来指定数据列的主键。\n\n```jsx\n// 比如你的数据主键是 uid\nreturn <Transfer rowKey={record => record.uid} />;\n```\n\n",e.exports=t.default}});