webpackJsonp([16],{466:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var l=h(n(4)),a=h(n(2)),r=h(n(3)),o=h(n(5)),u=h(n(6)),d=n(0),s=h(d),i=h(n(471)),f=h(n(468)),c=h(n(659)),p=h(n(660)),v=h(n(661));function h(e){return e&&e.__esModule?e:{default:e}}var m=function(e){function t(){return(0,a.default)(this,t),(0,o.default)(this,(t.__proto__||(0,l.default)(t)).apply(this,arguments))}return(0,u.default)(t,e),(0,r.default)(t,[{key:"render",value:function(){return s.default.createElement("div",null,s.default.createElement(i.default,{title:"示例一",content:s.default.createElement(p.default,null),doc:c.default}),s.default.createElement(f.default,{source:v.default}))}}]),t}(d.Component);t.default=s.default.createElement(m,null),e.exports=t.default},468:function(e,t,n){e.exports=n(9)(1141)},469:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var l=i(n(4)),a=i(n(2)),r=i(n(3)),o=i(n(5)),u=i(n(6)),d=i(n(0)),s=n(470);function i(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){(0,a.default)(this,t);var n=(0,o.default)(this,(t.__proto__||(0,l.default)(t)).call(this,e));return n.state={},n}return(0,u.default)(t,e),(0,r.default)(t,[{key:"render",value:function(){return d.default.createElement("div",null,d.default.createElement(s.UnControlled,{value:this.props.value,options:{mode:"javascript",theme:"material",readOnly:!0},onChange:function(e,t,n){}}))}}]),t}(d.default.Component);t.default=f,e.exports=t.default},470:function(e,t,n){e.exports=n(9)(1602)},471:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=i(n(4)),a=i(n(2)),r=i(n(3)),o=i(n(5)),u=i(n(6)),d=i(n(0)),s=(i(n(468)),i(n(469)));function i(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){(0,a.default)(this,t);var n=(0,o.default)(this,(t.__proto__||(0,l.default)(t)).call(this,e));return n.state={},n}return(0,u.default)(t,e),(0,r.default)(t,[{key:"render",value:function(){return d.default.createElement("div",null,d.default.createElement("p",null,this.props.title),this.props.content,d.default.createElement("br",null),d.default.createElement("br",null),d.default.createElement("br",null),d.default.createElement("div",null,d.default.createElement(s.default,{value:this.props.doc})))}}]),t}(d.default.Component);t.default=f,e.exports=t.default},659:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default='\nimport React, { Component } from \'react\'\nimport { TreeSelect } from \'ttk-component\'\nconst TreeNode = TreeSelect.TreeNode\n\nexport default class Example1 extends Component {\n\n\tstate = {\n\t\tvalue: undefined\n\t}\n\n\thandleChange(value) {\n\t\tconsole.log(arguments)\n\t\tthis.setState({ value })\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<TreeSelect\n\t\t\t\tshowSearch\n\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\tvalue={this.state.value}\n\t\t\t\tdropdownStyle={{ maxHeight: 400, overflow: \'auto\' }}\n\t\t\t\tplaceholder="Please select"\n\t\t\t\tallowClear\n\t\t\t\ttreeDefaultExpandAll\n\t\t\t\tonChange={this.handleChange}\n\t\t\t>\n\t\t\t\t<TreeNode value="parent 1" title="parent 1" key="0-1">\n\t\t\t\t\t<TreeNode value="parent 1-0" title="parent 1-0" key="0-1-1">\n\t\t\t\t\t\t<TreeNode value="leaf1" title="my leaf" key="random" />\n\t\t\t\t\t\t<TreeNode value="leaf2" title="your leaf" key="random1" />\n\t\t\t\t\t</TreeNode>\n\t\t\t\t\t<TreeNode value="parent 1-1" title="parent 1-1" key="random2">\n\t\t\t\t\t\t<TreeNode value="sss" title={<b style={{ color: \'#08c\' }}>sss</b>} key="random3" />\n\t\t\t\t\t</TreeNode>\n\t\t\t\t</TreeNode>\n\t\t\t</TreeSelect>\n\t\t)\n\t}\n}\n',e.exports=t.default},660:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=f(n(4)),a=f(n(2)),r=f(n(3)),o=f(n(5)),u=f(n(6)),d=n(0),s=f(d),i=n(128);function f(e){return e&&e.__esModule?e:{default:e}}var c=i.TreeSelect.TreeNode,p=function(e){function t(){var e,n,r,u;(0,a.default)(this,t);for(var d=arguments.length,s=Array(d),i=0;i<d;i++)s[i]=arguments[i];return n=r=(0,o.default)(this,(e=t.__proto__||(0,l.default)(t)).call.apply(e,[this].concat(s))),r.state={value:void 0},u=n,(0,o.default)(r,u)}return(0,u.default)(t,e),(0,r.default)(t,[{key:"handleChange",value:function(e){console.log(arguments),this.setState({value:e})}},{key:"render",value:function(){return s.default.createElement(i.TreeSelect,{showSearch:!0,style:{width:300},value:this.state.value,dropdownStyle:{maxHeight:400,overflow:"auto"},placeholder:"Please select",allowClear:!0,treeDefaultExpandAll:!0,onChange:this.handleChange},s.default.createElement(c,{value:"parent 1",title:"parent 1",key:"0-1"},s.default.createElement(c,{value:"parent 1-0",title:"parent 1-0",key:"0-1-1"},s.default.createElement(c,{value:"leaf1",title:"my leaf",key:"random"}),s.default.createElement(c,{value:"leaf2",title:"your leaf",key:"random1"})),s.default.createElement(c,{value:"parent 1-1",title:"parent 1-1",key:"random2"},s.default.createElement(c,{value:"sss",title:s.default.createElement("b",{style:{color:"#08c"}},"sss"),key:"random3"}))))}}]),t}(d.Component);t.default=p,e.exports=t.default},661:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\n\n# TreeSelect 树选择框\n\n## antd TreeSelect API\n\n[详情请点击查看官方](https://ant.design/components/tree-select-cn/)\n\n### Tree props\n\n| 参数       | 说明                                      | 类型       | 默认值 |\n|-----------|------------------------------------------|------------|--------|\n| value    | 指定当前选中的条目 | string/string[] |  -  |\n| labelInValue | 是否把每个选项的 label 包装到 value 中，会把 value 类型从 `string` 变为 `{key: string, label: ReactNode, halfChecked(treeCheckStrictly 时有效): string[] }` 的格式 | boolean | false |\n| defaultValue | 指定默认选中的条目 | string/string[]   |  -  |\n| multiple   | 支持多选（当设置 treeCheckable 时自动变为true） | boolean | false |\n| onSelect | 被选中时调用 | function(value, node, extra) | -   |\n| onChange | 选中树节点时调用此函数 | function(value, label, extra) | - |\n| allowClear | 显示清除按钮 | boolean | false |\n| onSearch | 文本框值变化时回调 | function(value: string) | - |\n| placeholder | 选择框默认文字 | string | - |\n| searchPlaceholder | 搜索框默认文字 | string | - |\n| dropdownStyle | 下拉菜单的样式 | object | - |\n| dropdownMatchSelectWidth | 下拉菜单和选择器同宽 | boolean | true |\n| size    | 选择框大小，可选 `large` `small`  | string      | 'default' |\n| showSearch | 在下拉中显示搜索框(仅在单选模式下生效) | boolean | false |\n| disabled | 是否禁用 | boolean | false |\n| showCheckedStrategy | `TreeSelect.SHOW_ALL`: 显示所有选中节点(包括父节点). `TreeSelect.SHOW_PARENT`: 只显示父节点(当父节点下所有子节点都选中时). 默认只显示子节点. | enum{TreeSelect.SHOW_ALL, TreeSelect.SHOW_PARENT, TreeSelect.SHOW_CHILD } | TreeSelect.SHOW_CHILD |\n| treeDefaultExpandAll | 默认展开所有树节点 | boolean | false |\n| treeDefaultExpandedKeys | 默认展开的树节点 | string[] | - |\n| treeCheckable | 显示 checkbox | boolean | false |\n| treeCheckStrictly | checkable 状态下节点选择完全受控（父子节点选中状态不再关联）| boolean | false |\n| filterTreeNode | 是否根据输入项进行筛选，默认用 treeNodeFilterProp 的值作为要筛选的 TreeNode 的属性值 | boolea or Function(inputValue: string, treeNode: TreeNode) (函数需要返回bool值) | Function |\n| treeNodeFilterProp | 输入项过滤对应的 treeNode 属性 | string | 'value' |\n| treeNodeLabelProp | 作为显示的 prop 设置 | string | 'title' |\n| treeData | treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（value 在整个树范围内唯一）| array<{value, label, children, [disabled, selectable]}> | [] |\n|treeDataSimpleMode | 使用简单格式的 treeData，具体设置参考可设置的类型 (此时 treeData 应变为这样的数据结构: [{id:1, pId:0, value:'1', label:\"test1\",...},...], `pId` 是父节点的 id) | false or Array<{ id: string, pId: string, rootPId: null }> | false |\n| loadData | 异步加载数据 | function(node) | - |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](http://codepen.io/anon/pen/xVBOVQ?editors=001) | Function(triggerNode) | () => document.body |\n\n### TreeNode props\n\n> 建议使用 treeData 来代替 TreeNode，免去手工构造麻烦\n\n| 参数       | 说明                                      | 类型       | 默认值 |\n|-----------|------------------------------------------|------------|--------|\n| disabled    | 是否禁用 | boolean   |  false  |\n| key   | 此项必须设置（其值在整个树范围内唯一） |  string | - |\n| value   | 默认根据此属性值进行筛选（其值在整个树范围内唯一） | string | - |\n| title | 树节点显示的内容 | string or ReactNode | '---' |\n| isLeaf | 是否是叶子节点 | boolean | false |\n\n",e.exports=t.default}});